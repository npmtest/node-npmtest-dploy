{"/home/travis/build/npmtest/node-npmtest-dploy/test.js":"/* istanbul instrument in package npmtest_dploy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dploy/lib.npmtest_dploy.js":"/* istanbul instrument in package npmtest_dploy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_dploy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_dploy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-dploy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-dploy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_dploy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_dploy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_dploy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_dploy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_dploy.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_dploy.__dirname + '/lib.npmtest_dploy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dploy/node_modules/dploy/lib/dploy.js":"(function() {\n  var DPLOY, Deploy, Generator, Help, Version, colors,\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n  colors = require(\"colors\");\n\n  Deploy = require(\"./deploy\");\n\n  Generator = require(\"./generator\");\n\n  Help = require(\"./help\");\n\n  Version = require(\"./version\");\n\n  module.exports = DPLOY = (function() {\n    DPLOY.prototype.servers = null;\n\n    DPLOY.prototype.connection = null;\n\n    DPLOY.prototype.ignoreInclude = false;\n\n    DPLOY.prototype.catchup = false;\n\n    /*\n    \tDPLOY\n    \tIf you set a custom config file for DPLOY\n    \tIt will use this config instead of trying to load a dploy.yaml file\n    \t\n    \t@param \tconfig (optional)\t\tCustom config file of a server to deploy at\n    \t@param \tcompleted (optional)\tCallback for when the entire proccess is completed\n    */\n\n\n    function DPLOY(config, completed) {\n      this.config = config;\n      this.completed = completed;\n      this.deploy = __bind(this.deploy, this);\n      if (this.config) {\n        this.servers = [null];\n        return this.deploy();\n      } else if (process.argv.indexOf(\"install\") >= 0) {\n        return new Generator();\n      } else if (process.argv.indexOf(\"--help\") >= 0 || process.argv.indexOf(\"-h\") >= 0) {\n        return new Help();\n      } else if (process.argv.indexOf(\"--version\") >= 0 || process.argv.indexOf(\"-v\") >= 0) {\n        return new Version();\n      } else {\n        this.servers = process.argv.splice(2, process.argv.length);\n        this.ignoreInclude = this.servers.indexOf(\"-i\") >= 0 || this.servers.indexOf(\"--ignore-include\") >= 0;\n        this.catchup = this.servers.indexOf(\"-c\") >= 0 || this.servers.indexOf(\"--catchup\") >= 0;\n        this.servers = this._filterFlags(this.servers, [\"-i\", \"--ignore-include\", \"-c\", \"--catchup\"]);\n        if (this.servers.length === 0) {\n          this.servers.push(null);\n        }\n        this.deploy();\n      }\n    }\n\n    DPLOY.prototype.deploy = function() {\n      var code;\n      if (this.connection) {\n        this.connection.dispose();\n        this.connection = null;\n      }\n      if (this.servers.length) {\n        this.connection = new Deploy(this.config, this.servers[0], this.ignoreInclude, this.catchup);\n        this.connection.completed.add(this.deploy);\n        this.servers.shift();\n      } else {\n        console.log(\"All Completed :)\".green.bold);\n        if (this.completed) {\n          this.completed.call(this);\n        } else {\n          process.exit(code = 0);\n        }\n      }\n      return this;\n    };\n\n    DPLOY.prototype._filterFlags = function(servers, flags) {\n      servers = servers.filter(function(value) {\n        var valid;\n        valid = true;\n        flags.forEach(function(flag) {\n          if (flag === value) {\n            return valid = false;\n          }\n        });\n        return valid;\n      });\n      return servers;\n    };\n\n    return DPLOY;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-dploy/node_modules/dploy/lib/deploy.js":"(function() {\n  var Deploy, Signal, YAML, colors, exec, expand, fs, minimatch, path, prompt,\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n  colors = require(\"colors\");\n\n  path = require(\"path\");\n\n  fs = require(\"fs\");\n\n  YAML = require(\"yamljs\");\n\n  Signal = require(\"signals\");\n\n  expand = require(\"glob-expand\");\n\n  minimatch = require(\"minimatch\");\n\n  prompt = require(\"prompt\");\n\n  exec = require(\"child_process\").exec;\n\n  module.exports = Deploy = (function() {\n    Deploy.prototype.server = null;\n\n    Deploy.prototype.ignoreInclude = null;\n\n    Deploy.prototype.local_hash = null;\n\n    Deploy.prototype.remote_hash = null;\n\n    Deploy.prototype.connection = null;\n\n    Deploy.prototype.revisionPath = null;\n\n    Deploy.prototype.connections = null;\n\n    Deploy.prototype.numConnections = null;\n\n    Deploy.prototype.toUpload = null;\n\n    Deploy.prototype.toDelete = null;\n\n    Deploy.prototype.dirCreated = null;\n\n    Deploy.prototype.isConnected = null;\n\n    Deploy.prototype.completed = null;\n\n    /*\n    \t@constructor\n    \n    \t@param\tconfig (optional)\t\tDefault configuration for this server\n    \t@param\tserver (optional)\t\tSet the server to load from the YAML file\n    \t@param\tignoreInclude (false)\tIgnore the 'include' tag\n    \t@param\tcatchup (false)\t\t\tCatchup with the server and only uploads the revision file\n    */\n\n\n    function Deploy(config, server, ignoreInclude, catchup) {\n      this.config = config;\n      this.server = server;\n      this.ignoreInclude = ignoreInclude != null ? ignoreInclude : false;\n      this.catchup = catchup != null ? catchup : false;\n      this.complete = __bind(this.complete, this);\n      this.dispose = __bind(this.dispose, this);\n      this.removeConnections = __bind(this.removeConnections, this);\n      this.setFolderAsCreated = __bind(this.setFolderAsCreated, this);\n      this.deleteItem = __bind(this.deleteItem, this);\n      this.uploadItem = __bind(this.uploadItem, this);\n      this.checkBeforeUpload = __bind(this.checkBeforeUpload, this);\n      this.canDelete = __bind(this.canDelete, this);\n      this.canUpload = __bind(this.canUpload, this);\n      this.completed = new Signal();\n      this.connections = [];\n      this.numConnections = 0;\n      this.toUpload = [];\n      this.toDelete = [];\n      this.dirCreated = {};\n      this.isConnected = false;\n      prompt.message = \"– \".red;\n      prompt.delimiter = \"\";\n      if (this.config != null) {\n        this.configLoaded();\n      } else {\n        this.loadYAML();\n      }\n    }\n\n    /*\n    \tLoad the dploy.yaml, parse and find the current server\n    */\n\n\n    Deploy.prototype.loadYAML = function() {\n      var _this = this;\n      return fs.readFile(\"dploy.yaml\", function(error, data) {\n        var code, key, yaml;\n        if (error) {\n          return console.log(\"Error:\".bold.red, \"The file \\\"dploy.yaml\\\" could not be found.\");\n          process.exit(code = 0);\n        }\n        yaml = YAML.parse(data.toString());\n        if (!_this.server) {\n          for (key in yaml) {\n            _this.server = key;\n            break;\n          }\n        }\n        _this.config = yaml[_this.server];\n        if (!_this.config) {\n          return console.log(\"Error:\".bold.red, \"We couldn't find the settings for \" + (\"\" + _this.server).bold.red);\n          process.exit(code = 0);\n        }\n        return _this.configLoaded();\n      });\n    };\n\n    /*\n    \tMethod for when the config file is loaded\n    */\n\n\n    Deploy.prototype.configLoaded = function() {\n      this.setupFallbackConfig();\n      return this.checkPassword(this.checkBranch);\n    };\n\n    /*\n    \tSet the fallback configuration\n    */\n\n\n    Deploy.prototype.setupFallbackConfig = function() {\n      var regExpPath, _base, _base1, _base10, _base2, _base3, _base4, _base5, _base6, _base7, _base8, _base9;\n      if (this.server == null) {\n        this.server = this.config.host;\n      }\n      if ((_base = this.config).scheme == null) {\n        _base.scheme = \"ftp\";\n      }\n      if ((_base1 = this.config).port == null) {\n        _base1.port = (this.config.scheme === \"ftp\" ? 21 : 22);\n      }\n      if ((_base2 = this.config).secure == null) {\n        _base2.secure = false;\n      }\n      if ((_base3 = this.config).secureOptions == null) {\n        _base3.secureOptions = {};\n      }\n      if ((_base4 = this.config).slots == null) {\n        _base4.slots = 1;\n      }\n      if ((_base5 = this.config).revision == null) {\n        _base5.revision = \".rev\";\n      }\n      if ((_base6 = this.config).path == null) {\n        _base6.path = {};\n      }\n      if ((_base7 = this.config.path).local == null) {\n        _base7.local = \"\";\n      }\n      if ((_base8 = this.config.path).remote == null) {\n        _base8.remote = \"\";\n      }\n      if ((_base9 = this.config).exclude == null) {\n        _base9.exclude = [];\n      }\n      if ((_base10 = this.config).include == null) {\n        _base10.include = {};\n      }\n      regExpPath = new RegExp(\"(.*[^/]$)\");\n      if (this.config.path.local === \"/\") {\n        this.config.path.local = \"\";\n      }\n      if (this.config.path.local !== \"\") {\n        this.config.path.local = this.config.path.local.replace(regExpPath, \"$1/\");\n      }\n      if (this.config.path.remote !== \"\") {\n        this.config.path.remote = this.config.path.remote.replace(regExpPath, \"$1/\");\n      }\n      this.revisionPath = this.config.path.local ? this.config.path.local + this.config.revision : this.config.revision;\n      return this;\n    };\n\n    /*\n    \tThis method will double check for the password, publicKey and privateKey\n    \tIf none of those are found, DPLOY will prompt you to type it\n    \n    \t@param\tcallback \t\t\t\tThe callback for when the password is found\n    */\n\n\n    Deploy.prototype.checkPassword = function(callback) {\n      var _this = this;\n      if (this.config.pass) {\n        return callback.call(this);\n      }\n      if (this.config.privateKey || this.config.publicKey && this.config.scheme === \"sftp\") {\n        if (this.config.privateKey) {\n          this.config.privateKey = fs.readFileSync(this._resolveHomeFolder(this.config.privateKey));\n        }\n        if (this.config.publicKey) {\n          this.config.publicKey = fs.readFileSync(this._resolveHomeFolder(this.config.publicKey));\n        }\n        return callback.call(this);\n      }\n      prompt.get([\n        {\n          name: \"password\",\n          description: \"Enter the password for \".red + (\"\" + this.config.host + \":\").underline.bold.red,\n          required: true,\n          hidden: true\n        }\n      ], function(error, result) {\n        _this.config.pass = result.password;\n        return callback.call(_this);\n      });\n    };\n\n    /*\n    \tCheck if the branch you are working on can be deployed to that server\n    */\n\n\n    Deploy.prototype.checkBranch = function() {\n      var _this = this;\n      if (!this.config.branch) {\n        return this.setupGit();\n      }\n      if (typeof this.config.branch === \"string\") {\n        this.config.branch = [this.config.branch];\n      }\n      return exec(\"git rev-parse --abbrev-ref HEAD\", function(error, stdout, stderr) {\n        var branch, currentBranch, _i, _len, _ref;\n        if (error) {\n          return console.log(\"An error occurred when retrieving the current branch.\".bold.red, error);\n        }\n        currentBranch = stdout.replace(/\\s/g, \"\");\n        _ref = _this.config.branch;\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          branch = _ref[_i];\n          if (currentBranch === branch) {\n            return _this.setupGit();\n          }\n        }\n        console.log(\"Error: \".red.bold + \"You are not allowed to deploy from \".red + (\"\" + currentBranch).bold.underline.red + \" to \".red + (\"\" + _this.server).bold.underline.red);\n        return _this.removeConnections(false);\n      });\n    };\n\n    /*\n    \tGet the HEAD hash id so we can compare to the hash on the server\n    */\n\n\n    Deploy.prototype.setupGit = function() {\n      var _this = this;\n      console.log(\"Connecting to \".bold.yellow + (\"\" + this.server).bold.underline.yellow + \"...\".bold.yellow);\n      return exec(\"git log --pretty=format:%H -n 1\", function(error, stdout, stderr) {\n        if (error) {\n          return console.log(\"An error occurred when retrieving the local hash.\".bold.red, error);\n        }\n        _this.local_hash = stdout;\n        return _this.setupServer();\n      });\n    };\n\n    /*\n    \tConnect to the server and once it's done, check for the remote revision file\n    */\n\n\n    Deploy.prototype.setupServer = function() {\n      var scheme,\n        _this = this;\n      scheme = require(\"./scheme/\" + this.config.scheme);\n      this.connection = new scheme();\n      this.connection.failed.add(function() {\n        if (!_this.isConnected) {\n          return console.log(\"Connection failed.\".bold.red);\n        }\n      });\n      this.connection.connected.add(function() {\n        _this.isConnected = true;\n        _this.numConnections++;\n        _this.connections.push(_this.connection);\n        return _this.checkRevision();\n      });\n      return this.connection.connect(this.config);\n    };\n\n    /*\n    \tCreate more connections of your server for multiple uploads\n    */\n\n\n    Deploy.prototype.setupMultipleServers = function() {\n      var con, scheme,\n        _this = this;\n      scheme = require(\"./scheme/\" + this.config.scheme);\n      con = new scheme();\n      con.connected.add(function() {\n        _this.connections.push(con);\n        _this.numConnections++;\n        return _this.nextOnQueue(con);\n      });\n      return con.connect(this.config);\n    };\n\n    /*\n    \tCheck if the revision files exist, if not we will create one\n    */\n\n\n    Deploy.prototype.checkRevision = function() {\n      var remotePath,\n        _this = this;\n      console.log(\"Checking revisions...\".bold.yellow);\n      remotePath = this._normalize(this.config.path.remote + this.config.revision);\n      return this.connection.get(remotePath, function(error, data) {\n        if (error) {\n          fs.writeFile(_this.revisionPath, _this.local_hash, function(error) {\n            if (error) {\n              return console.log(\"Error creating revision file at:\".red, (\"\" + _this.revisionPath).red.bold.underline, error);\n            }\n            return _this.addAll();\n          });\n          return;\n        }\n        fs.writeFileSync(_this.revisionPath, _this.local_hash);\n        if (typeof data === \"string\") {\n          _this.remote_hash = _this._removeSpecialChars(data);\n          return _this.checkDiff(_this.remote_hash, _this.local_hash);\n        } else {\n          return data.on(\"data\", function(e) {\n            data.end();\n            _this.remote_hash = _this._removeSpecialChars(e.toString());\n            return _this.checkDiff(_this.remote_hash, _this.local_hash);\n          });\n        }\n      });\n    };\n\n    /*\n    \tGet the diff tree between the local and remote revisions\n    \n    \t@param\told_rev\t\t\t\t\tThe remote hash, usually it's the old version\n    \t@param\tnew_rev\t\t\t\t\tThe local hash, usually the latest one\n    */\n\n\n    Deploy.prototype.checkDiff = function(old_rev, new_rev) {\n      var _this = this;\n      if (!/([^\\s])/.test(old_rev) || !/([^\\s])/.test(new_rev)) {\n        return this.addAll();\n      }\n      console.log(\"Checking diffs between\".bold.yellow, (\"[\" + old_rev + \"]\").yellow, \">\".yellow, (\"[\" + new_rev + \"]\").yellow);\n      if (old_rev === new_rev) {\n        if (this.config.include) {\n          this.includeExtraFiles();\n          if (this.config.check) {\n            this.askBeforeUpload();\n          } else {\n            this.startUploads();\n          }\n          return;\n        } else {\n          console.log(\"No diffs between local and remote :)\".blue);\n          return this.removeConnections();\n        }\n      }\n      return exec(\"git diff --name-status \" + old_rev + \" \" + new_rev, {\n        maxBuffer: 5000 * 1024\n      }, function(error, stdout, stderr) {\n        var data, detail, files, remoteName, _i, _len;\n        if (error) {\n          return console.log((\"An error occurred when retrieving the 'git diff --name-status \" + old_rev + \" \" + new_rev + \"'\").bold.red, error);\n        }\n        if (!_this.catchup) {\n          files = stdout.split(\"\\n\");\n          for (_i = 0, _len = files.length; _i < _len; _i++) {\n            detail = files[_i];\n            data = detail.split(\"\\t\");\n            if (data.length > 1) {\n              remoteName = _this.config.path.local ? data[1].split(_this.config.path.local).join(\"\") : data[1];\n              if (data[0] === \"D\") {\n                if (_this.canDelete(data[1])) {\n                  _this.toDelete.push({\n                    name: data[1],\n                    remote: remoteName\n                  });\n                }\n              } else {\n                if (_this.canUpload(data[1])) {\n                  _this.toUpload.push({\n                    name: data[1],\n                    remote: remoteName\n                  });\n                }\n              }\n            }\n          }\n          _this.includeExtraFiles();\n        }\n        _this.toUpload.push({\n          name: _this.revisionPath,\n          remote: _this.config.revision\n        });\n        if (_this.config.check) {\n          _this.askBeforeUpload();\n        } else {\n          _this.startUploads();\n        }\n      });\n    };\n\n    /*\n    \tAdd the entire tree to our \"toUpload\" group\n    */\n\n\n    Deploy.prototype.addAll = function() {\n      var _this = this;\n      console.log(\"Uploading files...\".bold.yellow);\n      return exec(\"git ls-tree -r --name-only HEAD\", {\n        maxBuffer: 5000 * 1024\n      }, function(error, stdout, stderr) {\n        var detail, files, remoteName, _i, _len;\n        if (error) {\n          return console.log(\"An error occurred when retrieving 'git ls-tree -r --name-only HEAD'\".bold.red, error);\n        }\n        if (!_this.catchup) {\n          files = stdout.split(\"\\n\");\n          for (_i = 0, _len = files.length; _i < _len; _i++) {\n            detail = files[_i];\n            remoteName = _this.config.path.local ? detail.split(_this.config.path.local).join(\"\") : detail;\n            if (_this.canUpload(detail)) {\n              _this.toUpload.push({\n                name: detail,\n                remote: remoteName\n              });\n            }\n          }\n          _this.includeExtraFiles();\n        }\n        _this.toUpload.push({\n          name: _this.revisionPath,\n          remote: _this.config.revision\n        });\n        if (_this.config.check) {\n          _this.askBeforeUpload();\n        } else {\n          _this.startUploads();\n        }\n      });\n    };\n\n    /*\n    \tInclude extra files from the config file\n    */\n\n\n    Deploy.prototype.includeExtraFiles = function() {\n      var file, files, key, match, remoteFile, _i, _len;\n      if (this.ignoreInclude || this.catchup) {\n        return false;\n      }\n      for (key in this.config.include) {\n        files = expand({\n          filter: \"isFile\",\n          cwd: process.cwd()\n        }, key);\n        match = path.dirname(key).match(/^[0-9a-zA-Z_\\-/\\\\]+/);\n        for (_i = 0, _len = files.length; _i < _len; _i++) {\n          file = files[_i];\n          remoteFile = match && match.length ? file.substring(match[0].length) : file;\n          remoteFile = this.config.include[key] + remoteFile;\n          remoteFile = remoteFile.replace(/(\\/\\/)/g, \"/\");\n          this.toUpload.push({\n            name: file,\n            remote: remoteFile\n          });\n        }\n      }\n      return true;\n    };\n\n    /*\n    \tMethod to check if you can upload those files or not\n    \n    \t@param\tname (string)\t\t\tThe local file name\n    \t@return <boolean> if you can delete or not\n    */\n\n\n    Deploy.prototype.canUpload = function(name) {\n      var exclude, _i, _len, _ref;\n      if (name.length <= 0) {\n        return false;\n      }\n      if (this.config.path.local) {\n        if (name.indexOf(this.config.path.local) < 0) {\n          return false;\n        }\n      }\n      _ref = this.config.exclude;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        exclude = _ref[_i];\n        if (minimatch(name, exclude, {\n          dot: true\n        })) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    /*\n    \tMethod to check if you can delete those files or not\n    \n    \t@param\tname (string)\t\t\tThe local file name\n    \t@return <boolean> if you can delete or not\n    */\n\n\n    Deploy.prototype.canDelete = function(name) {\n      if (name.length <= 0) {\n        return false;\n      }\n      if (this.config.path.local) {\n        if (name.indexOf(this.config.path.local) === 0) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    /*\n    \tGet the user's confirmation before uploading the file\n    */\n\n\n    Deploy.prototype.askBeforeUpload = function() {\n      var file, remoteFile, _i, _j, _len, _len1, _ref, _ref1,\n        _this = this;\n      if (!this.hasFilesToUpload()) {\n        return;\n      }\n      if (this.toDelete.length) {\n        console.log(\"Files that will be deleted:\".bold.red);\n        _ref = this.toDelete;\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          file = _ref[_i];\n          console.log(\"[ ? ]\".grey, (\"\" + file.remote).red);\n        }\n      }\n      if (this.toUpload.length) {\n        console.log(\"Files that will be uploaded:\".bold.blue);\n        _ref1 = this.toUpload;\n        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n          file = _ref1[_j];\n          remoteFile = this._normalize(this.config.path.remote + file.remote);\n          console.log(\"[ ? ]\".blue, (\"\" + file.name).blue, \">\".green, (\"\" + remoteFile).blue);\n        }\n      }\n      prompt.start();\n      return prompt.get([\n        {\n          name: \"answer\",\n          pattern: /y|n|Y|N/,\n          description: \"Are you sure you want to upload those files?\".bold.red + \" (Y/n)\",\n          message: \"The answer should be YES (y) or NO (n).\"\n        }\n      ], function(error, result) {\n        if (result.answer.toLowerCase() === \"y\" || result.answer.toLowerCase() === \"\") {\n          return _this.startUploads();\n        } else {\n          console.log(\"Upload aborted by the user.\".red);\n          return _this.removeConnections(false);\n        }\n      });\n    };\n\n    /*\n    \tStart the upload and create the other connections if necessary\n    */\n\n\n    Deploy.prototype.startUploads = function() {\n      var i;\n      if (!this.hasFilesToUpload()) {\n        return;\n      }\n      this.nextOnQueue(this.connection);\n      i = this.config.slots - 1;\n      while (i-- > 0) {\n        this.setupMultipleServers();\n      }\n    };\n\n    /*\n    \tCheck if there's file to upload/delete\n    \n    \t@return <boolean> if there's files or not\n    */\n\n\n    Deploy.prototype.hasFilesToUpload = function() {\n      if (this.toUpload.length === 0 && this.toDelete.length === 0) {\n        console.log(\"No files to upload\".blue);\n        this.removeConnections();\n        return false;\n      }\n      return true;\n    };\n\n    /*\n    \tUpload or delete the next file in the queue\n    \t\n    \t@param\tconnection \t\t\t\tThe FTP/SFTP connection to use\n    */\n\n\n    Deploy.prototype.nextOnQueue = function(connection) {\n      var item, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;\n      if (this.toDelete.length) {\n        _ref = this.toDelete;\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          item = _ref[_i];\n          if (!item.started) {\n            this.deleteItem(connection, item);\n            return;\n          }\n        }\n      }\n      if (this.toUpload.length) {\n        _ref1 = this.toUpload;\n        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n          item = _ref1[_j];\n          if (!item.started) {\n            this.checkBeforeUpload(connection, item);\n            return;\n          }\n        }\n      }\n      _ref2 = this.toDelete;\n      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {\n        item = _ref2[_k];\n        if (!item.completed) {\n          return;\n        }\n      }\n      _ref3 = this.toUpload;\n      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {\n        item = _ref3[_l];\n        if (!item.completed) {\n          return;\n        }\n      }\n      return this.removeConnections();\n    };\n\n    /*\n    \tCheck if the file is inside subfolders\n    \tIf it's is, create the folders first and then upload the file.\n    */\n\n\n    Deploy.prototype.checkBeforeUpload = function(connection, item) {\n      var folder, nameSplit,\n        _this = this;\n      item.started = true;\n      nameSplit = item.remote.split(\"/\");\n      if (nameSplit.length > 1) {\n        nameSplit.length = nameSplit.length - 1;\n        folder = nameSplit.join(\"/\");\n        if (this.dirCreated[folder]) {\n          this.uploadItem(connection, item);\n          return;\n        }\n        return connection.mkdir(this._normalize(this.config.path.remote + folder), function(error) {\n          if (!_this.dirCreated[folder]) {\n            if (error) {\n\n            } else {\n              _this.setFolderAsCreated(folder);\n            }\n          }\n          if (error) {\n            item.started = false;\n            return _this.nextOnQueue(connection);\n          } else {\n            return _this.uploadItem(connection, item);\n          }\n        });\n      } else {\n        return this.uploadItem(connection, item);\n      }\n    };\n\n    /*\n    \tUpload the file to the remote directory\n    \t\n    \t@param\tconnection \t\t\t\tThe FTP/SFTP connection to use\n    \t@param \titem \t\t\t\t\tThe item to upload\n    */\n\n\n    Deploy.prototype.uploadItem = function(connection, item) {\n      var remote_path,\n        _this = this;\n      remote_path = this._normalize(this.config.path.remote + item.remote);\n      return connection.upload(item.name, remote_path, function(error) {\n        if (error) {\n          console.log(\"[ + ]\".blue, (\"Fail uploading file \" + item.name + \":\").red, error);\n          item.started = false;\n          item.completed = false;\n        } else {\n          console.log(\"[ + ]\".blue + (\" File uploaded: \" + item.name + \":\").blue);\n          item.completed = true;\n        }\n        return _this.nextOnQueue(connection);\n      });\n    };\n\n    /*\n    \tDelete an item from the remote server\n    \n    \t@param\tconnection \t\t\t\tThe FTP/SFTP connection to use\n    \t@param \titem \t\t\t\t\tThe item to delete\n    */\n\n\n    Deploy.prototype.deleteItem = function(connection, item) {\n      var remote_path,\n        _this = this;\n      item.started = true;\n      remote_path = this._normalize(this.config.path.remote + item.remote);\n      return connection[\"delete\"](remote_path, function(error) {\n        if (error) {\n          console.log(\"[ × ]\".grey, (\"Fail deleting file \" + remote_path + \":\").red);\n        } else {\n          console.log(\"[ × ]\".grey, (\"File deleted: \" + remote_path + \":\").grey);\n        }\n        item.completed = true;\n        return _this.nextOnQueue(connection);\n      });\n    };\n\n    /*\n    \tWhen we are creating the folders in the remote server we got make sure\n    \twe don't try to rec-reate they, otherwise expect chaos\n    */\n\n\n    Deploy.prototype.setFolderAsCreated = function(folder) {\n      var content, i;\n      i = folder.lastIndexOf(\"/\");\n      if (this.dirCreated[folder]) {\n        return;\n      }\n      while (i > 0) {\n        content = folder.slice(0, i);\n        this.dirCreated[content] = true;\n        i = content.lastIndexOf(\"/\");\n      }\n      return this.dirCreated[folder] = true;\n    };\n\n    /*\n    \tRemove/destroy all connections\n    \n    \t@param displayMessage <true>\tSet if you want to display a message for when the upload is completed\n    */\n\n\n    Deploy.prototype.removeConnections = function(displayMessage) {\n      var con, _i, _len, _ref, _results,\n        _this = this;\n      if (displayMessage == null) {\n        displayMessage = true;\n      }\n      if (this.numConnections > 0) {\n        _ref = this.connections;\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          con = _ref[_i];\n          con.closed.add(function() {\n            _this.numConnections--;\n            if (_this.numConnections === 0) {\n              return _this.complete(displayMessage);\n            }\n          });\n          _results.push(con.close());\n        }\n        return _results;\n      } else {\n        return this.complete(displayMessage);\n      }\n    };\n\n    /*\n    \tRemove/destroy all connections\n    */\n\n\n    Deploy.prototype.dispose = function() {\n      var con, _i, _len, _ref;\n      if (this.completed) {\n        _ref = this.connections;\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          con = _ref[_i];\n          con.dispose();\n        }\n        this.completed.dispose();\n        return this.completed = null;\n      }\n    };\n\n    /*\n    \tWhen everything is completed\n    \n    \t@param displayMessage <true>\tSet if you want to display a message for when the upload is completed\n    */\n\n\n    Deploy.prototype.complete = function(displayMessage) {\n      var _this = this;\n      return fs.unlink(this.revisionPath, function(err) {\n        if (displayMessage) {\n          console.log(\"Upload completed for \".green + (\"\" + _this.server).bold.underline.green);\n        }\n        return _this.completed.dispatch();\n      });\n    };\n\n    Deploy.prototype._normalize = function(str) {\n      return path.normalize(str).replace(/\\\\+/g, \"/\");\n    };\n\n    Deploy.prototype._removeSpecialChars = function(str) {\n      return str.replace(/[\\W]/g, \"\");\n    };\n\n    Deploy.prototype._resolveHomeFolder = function(str) {\n      var homeFolder;\n      homeFolder = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;\n      if (str.substr(0, 1) === \"~\") {\n        return path.resolve(path.join(homeFolder, str.substr(1)));\n      }\n      return str;\n    };\n\n    return Deploy;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-dploy/node_modules/dploy/lib/generator.js":"(function() {\n  var Generator, Signal, colors, fs, path,\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n  colors = require(\"colors\");\n\n  fs = require(\"fs\");\n\n  path = require(\"path\");\n\n  Signal = require(\"signals\");\n\n  module.exports = Generator = (function() {\n    function Generator() {\n      this._generatePostCommit = __bind(this._generatePostCommit, this);\n      this._generateConfig = __bind(this._generateConfig, this);\n      this._dployCompleted = new Signal();\n      this._dployCompleted.add(this._generatePostCommit);\n      this._postCommitCompleted = new Signal();\n      this._postCommitCompleted.add(this._completed);\n      console.log(\"Installing \".yellow + \"DPLOY\".bold.yellow + \"...\".yellow);\n      this._generateConfig();\n    }\n\n    Generator.prototype._generateConfig = function() {\n      var fileName;\n      fileName = \"dploy.yaml\";\n      if (!fs.existsSync(fileName)) {\n        fs.createReadStream(path.resolve(__dirname, \"../generator/dploy.yaml\")).pipe(fs.createWriteStream(fileName));\n      }\n      return this._dployCompleted.dispatch();\n    };\n\n    Generator.prototype._generatePostCommit = function() {\n      var content, fileData, fileName,\n        _this = this;\n      if (!fs.existsSync(\".git\")) {\n        return this._postCommitCompleted.dispatch();\n      }\n      fileName = \".git/hooks/post-commit\";\n      content = fs.readFileSync(path.resolve(__dirname, \"../generator/post-commit\")).toString();\n      if (fs.existsSync(fileName)) {\n        fileData = fs.readFileSync(fileName).toString();\n        if (fileData.toLowerCase().indexOf(\"dploy\") >= 0) {\n          return this._postCommitCompleted.dispatch();\n        }\n        if (fileData.indexOf(\"#!/bin/bash\") >= 0) {\n          content = content.replace(new RegExp(\"#!\\/bin\\/bash\", \"g\"), \"\");\n        }\n      }\n      return fs.appendFile(fileName, content, function(error) {\n        if (error) {\n          console.log(\"Error:\".bold.red, \"The post-commit file could not be created. Check the permissions of the folder.\".red);\n          console.log(\"\\t \" + error);\n          return _this._postCommitCompleted.dispatch();\n        }\n        fs.chmodSync(fileName, \"0755\");\n        return _this._postCommitCompleted.dispatch();\n      });\n    };\n\n    Generator.prototype._completed = function() {\n      var code;\n      console.log(\"Done!\".bold.green + \" Your project is ready to \".green + \"DEPLOY\".green.bold + \" :) \".green);\n      return process.exit(code = 0);\n    };\n\n    return Generator;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-dploy/node_modules/dploy/lib/help.js":"(function() {\n  var Generator, Signal, colors, fs, path;\n\n  colors = require(\"colors\");\n\n  fs = require(\"fs\");\n\n  path = require(\"path\");\n\n  Signal = require(\"signals\");\n\n  module.exports = Generator = (function() {\n    function Generator() {\n      var code, packageConfig, usage;\n      packageConfig = require(\"../package.json\");\n      usage = (\"DPLOY v\" + packageConfig.version + \"\\n\").bold;\n      usage += \"Command line tool to deploy websites using FTP/SFTP and git.\\n\\n\".grey;\n      usage += \"Usage:\\n\";\n      usage += \"  dploy [\" + 'environment(s)'.green + \"]\\n\\n\";\n      usage += \"Commands:\\n\";\n      usage += \"  install \\t\\t \" + '# Install the dploy.yaml and the post-commit script'.grey + \"\\n\";\n      usage += \"  -h, --help \\t\\t \" + '# Show this instructions'.grey + \"\\n\\n\";\n      usage += \"  -v, --version \\t\\t \" + '# Show the current version of DPLOY'.grey + \"\\n\\n\";\n      usage += \"Flags:\\n\";\n      usage += \"  -i, --ignore-include \\t \" + '# Ignore the files that are on your include list'.grey + \"\\n\\n\";\n      usage += \"Examples:\\n\";\n      usage += \"  dploy \\t\\t \" + '# Deploy to the first environment on your dploy.yaml'.grey + \"\\n\";\n      usage += \"  dploy dev \\t\\t \" + '# Deploy to the environment \\\"dev\\\" on your dploy.yaml'.grey + \"\\n\";\n      usage += \"  dploy dev stage \\t \" + '# Deploy to the environments \\\"dev\\\" and \\\"stage\\\" on your dploy.yaml'.grey + \"\\n\";\n      usage += \"  dploy dev stage -i \\t \" + '# Deploy to the environments \\\"dev\\\" and \\\"stage\\\" on your dploy.yaml and ignore the \\\"include\\\" parameter'.grey + \"\\n\";\n      usage += \"  dploy install \\t \" + '# Install dploy files'.grey + \"\\n\";\n      usage += \"  dploy -h \\t\\t \" + '# Show the instructions'.grey;\n      console.log(usage);\n      process.exit(code = 0);\n    }\n\n    return Generator;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-dploy/node_modules/dploy/lib/version.js":"(function() {\n  var Generator, Signal, fs;\n\n  fs = require(\"fs\");\n\n  Signal = require(\"signals\");\n\n  module.exports = Generator = (function() {\n    function Generator() {\n      var code, packageConfig;\n      packageConfig = require(\"../package.json\");\n      console.log(\"v\" + packageConfig.version);\n      process.exit(code = 0);\n    }\n\n    return Generator;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-dploy/node_modules/dploy/lib/scheme/ftp.js":"(function() {\n  var FTP, Signal, ftp;\n\n  ftp = require(\"ftp\");\n\n  Signal = require(\"signals\");\n\n  module.exports = FTP = (function() {\n    FTP.prototype.connection = null;\n\n    FTP.prototype.connected = null;\n\n    FTP.prototype.failed = null;\n\n    FTP.prototype.closed = null;\n\n    function FTP() {\n      var _this = this;\n      this.connected = new Signal();\n      this.failed = new Signal();\n      this.closed = new Signal();\n      this.connection = new ftp();\n      this.connection.on(\"error\", function() {\n        return _this.failed.dispatch();\n      });\n      this.connection.on(\"ready\", function() {\n        return _this.connected.dispatch();\n      });\n    }\n\n    /*\n    \tConnect to the FTP\n    \n    \t@param config <object> Configuration file for your connection\n    */\n\n\n    FTP.prototype.connect = function(config) {\n      return this.connection.connect({\n        host: config.host,\n        port: config.port,\n        user: config.user,\n        password: config.pass,\n        secure: config.secure,\n        secureOptions: config.secureOptions\n      });\n    };\n\n    /*\n    \tClose the connection\n    */\n\n\n    FTP.prototype.close = function(callback) {\n      var _this = this;\n      this.connection.on(\"end\", function() {\n        return _this.closed.dispatch();\n      });\n      return this.connection.end();\n    };\n\n    /*\n    \tDispose\n    */\n\n\n    FTP.prototype.dispose = function() {\n      if (this.connected) {\n        this.connected.dispose();\n        this.connected = null;\n      }\n      if (this.failed) {\n        this.failed.dispose();\n        this.failed = null;\n      }\n      if (this.closed) {\n        this.closed.dispose();\n        return this.closed = null;\n      }\n    };\n\n    /*\n    \tRetrieve a file on the server\n    \n    \t@param path: <string> The path of your file\n    \t@param callback: <function> Callback method\n    */\n\n\n    FTP.prototype.get = function(path, callback) {\n      return this.connection.get(path, callback);\n    };\n\n    /*\n    \tUpload a file to the server\n    \n    \t@param local_path: <string> The local path of your file\n    \t@param remote_path: <string> The remote path where you want your file to be uploaded at\n    \t@param callback: <function> Callback method\n    */\n\n\n    FTP.prototype.upload = function(local_path, remote_path, callback) {\n      return this.connection.put(local_path, remote_path, callback);\n    };\n\n    /*\n    \tDelete a file from the server\n    \n    \t@param remote_path: <string> The remote path you want to delete\n    \t@param callback: <function> Callback method\n    */\n\n\n    FTP.prototype[\"delete\"] = function(remote_path, callback) {\n      return this.connection[\"delete\"](remote_path, callback);\n    };\n\n    /*\n    \tCreate a directory\n    \n    \t@param path: <string> The path of the directory you want to create\n    \t@param callback: <function> Callback method\n    */\n\n\n    FTP.prototype.mkdir = function(path, callback) {\n      return this.connection.mkdir(path, true, callback);\n    };\n\n    return FTP;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-dploy/node_modules/dploy/lib/scheme/sftp.js":"(function() {\n  var SFTP, Signal, fs, ssh2;\n\n  ssh2 = require(\"ssh2\");\n\n  Signal = require(\"signals\");\n\n  fs = require(\"fs\");\n\n  module.exports = SFTP = (function() {\n    SFTP.prototype.sftp = null;\n\n    SFTP.prototype.connection = null;\n\n    SFTP.prototype.connected = null;\n\n    SFTP.prototype.failed = null;\n\n    SFTP.prototype.closed = null;\n\n    SFTP.prototype.closing = null;\n\n    function SFTP() {\n      var _this = this;\n      this.connected = new Signal();\n      this.failed = new Signal();\n      this.closed = new Signal();\n      this.closing = false;\n      this.sftp = new ssh2();\n      this.sftp.on(\"error\", function() {\n        if (!_this.closing) {\n          return _this.failed.dispatch();\n        }\n      });\n      this.sftp.on(\"close\", function(hadError) {\n        if (_this.hadError) {\n          if (!_this.closing) {\n            return _this.failed.dispatch();\n          }\n        }\n      });\n      this.sftp.on(\"ready\", function() {\n        return _this.sftp.sftp(function(error, connection) {\n          if (error) {\n            return _this.failed.dispatch();\n          }\n          _this.connection = connection;\n          return _this.connected.dispatch();\n        });\n      });\n    }\n\n    /*\n    \tConnect to the FTP\n    \t@param config <object> Configuration file for your connection\n    */\n\n\n    SFTP.prototype.connect = function(config) {\n      return this.sftp.connect({\n        host: config.host,\n        port: config.port,\n        username: config.user,\n        password: config.pass,\n        privateKey: config.privateKey,\n        publicKey: config.publicKey,\n        passphrase: config.passphrase\n      });\n    };\n\n    /*\n    \tClose the connection\n    */\n\n\n    SFTP.prototype.close = function(callback) {\n      var _this = this;\n      if (this.closing) {\n        return;\n      }\n      this.closing = true;\n      this.sftp.on(\"end\", function() {\n        return _this.closed.dispatch();\n      });\n      return this.sftp.end();\n    };\n\n    /*\n    \tDispose\n    */\n\n\n    SFTP.prototype.dispose = function() {\n      if (this.connected) {\n        this.connected.dispose();\n        this.connected = null;\n      }\n      if (this.failed) {\n        this.failed.dispose();\n        this.failed = null;\n      }\n      if (this.closed) {\n        this.closed.dispose();\n        return this.closed = null;\n      }\n    };\n\n    /*\n    \tRetrieve a file on the server\n    \n    \t@param path: <string> The path of your file\n    \t@param callback: <function> Callback method\n    */\n\n\n    SFTP.prototype.get = function(path, callback) {\n      return this.connection.readFile(path, \"utf-8\", callback);\n    };\n\n    /*\n    \tUpload a file to the server\n    \n    \t@param local_path: <string> The local path of your file\n    \t@param remote_path: <string> The remote path where you want your file to be uploaded at\n    \t@param callback: <function> Callback method\n    */\n\n\n    SFTP.prototype.upload = function(local_path, remote_path, callback) {\n      return this.connection.fastPut(local_path, remote_path, callback);\n    };\n\n    /*\n    \tDelete a file from the server\n    \n    \t@param remote_path: <string> The remote path you want to delete\n    \t@param callback: <function> Callback method\n    */\n\n\n    SFTP.prototype[\"delete\"] = function(remote_path, callback) {\n      var content, i, paths,\n        _this = this;\n      i = remote_path.lastIndexOf(\"/\");\n      paths = [];\n      while (i > 0) {\n        content = remote_path.slice(0, i);\n        paths.push(content);\n        i = content.lastIndexOf(\"/\");\n      }\n      return this.connection.unlink(remote_path, function(error) {\n        if (error) {\n          return callback.apply(_this, [error]);\n        }\n        return _this._rdelete(paths, callback);\n      });\n    };\n\n    /*\n    \t@private\n    \tDelete directories recursively\n    */\n\n\n    SFTP.prototype._rdelete = function(paths, callback) {\n      var path,\n        _this = this;\n      path = paths.shift();\n      return this.connection.opendir(path, function(error, handle) {\n        if (error) {\n          return callback.apply(_this, [error]);\n        }\n        return _this.connection.readdir(handle, function(error, list) {\n          if (error || paths.length === 0) {\n            return callback.apply(_this, [error]);\n          }\n          if (list.length <= 2) {\n            return _this.connection.rmdir(path, function(error) {\n              if (error || paths.length === 0) {\n                return callback.apply(_this, [error]);\n              }\n              return _this._rdelete(paths, callback);\n            });\n          } else {\n            return callback.apply(_this, [error]);\n          }\n        });\n      });\n    };\n\n    /*\n    \tCreate a directory\n    \n    \t@param path: <string> The path of the directory you want to create\n    \t@param callback: <function> Callback method\n    */\n\n\n    SFTP.prototype.mkdir = function(path, callback) {\n      var content, i, paths;\n      i = path.length;\n      paths = [];\n      while (i > 0) {\n        content = path.slice(0, i);\n        paths.push(content);\n        i = content.lastIndexOf(\"/\");\n      }\n      return this._rmkdir(paths, callback);\n    };\n\n    /*\n    \t@private\n    \tCreate directories recursively\n    */\n\n\n    SFTP.prototype._rmkdir = function(paths, callback) {\n      var path,\n        _this = this;\n      path = paths.pop();\n      return this.connection.opendir(path, function(error, handle) {\n        if (error) {\n          return _this.connection.mkdir(path, function(error) {\n            if (error || paths.length === 0) {\n              return callback.apply(_this, [error]);\n            }\n            return _this._rmkdir(paths, callback);\n          });\n        } else {\n          if (paths.length === 0) {\n            return callback.apply(_this, [void 0]);\n          }\n          return _this._rmkdir(paths, callback);\n        }\n      });\n    };\n\n    return SFTP;\n\n  })();\n\n}).call(this);\n"}